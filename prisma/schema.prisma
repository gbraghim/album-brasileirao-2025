generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String        @id @default(cuid())
  name              String?
  email             String        @unique
  emailVerified     DateTime?
  image             String?
  password          String
  accounts          Account[]
  sessions          Session[]
  userFigurinhas    UserFigurinha[] @relation("UserFigurinhas")
  trocasEnviadas    Troca[]       @relation("TrocasEnviadas")
  trocasRecebidas   Troca[]       @relation("TrocasRecebidas")
  notificacoes      Notificacao[]
  numeroDeLogins    Int             @default(0)
  primeiroAcesso    Boolean         @default(true)
  pacotes           Pacote[]
  trocas            TrocaFigurinha[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([email])
}

model Time {
  id        String    @id @default(cuid())
  nome      String
  escudo    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  apiId     Int       @unique
  jogadores Jogador[]
  figurinhas Figurinha[]

  @@index([apiId])
}

model Jogador {
  id            String      @id @default(cuid())
  nome          String
  numero        Int?
  posicao       String?
  nacionalidade String?
  idade         Int?
  apiId         Int         @unique
  timeId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  foto          String?
  figurinhas    Figurinha[]
  time          Time        @relation(fields: [timeId], references: [id])

  @@index([timeId])
  @@index([apiId])
}

model Figurinha {
  id                String        @id @default(cuid())
  nome              String?
  posicao           String?
  numero            Int?
  nacionalidade     String?
  foto              String?
  time              Time?         @relation(fields: [timeId], references: [id])
  timeId            String?
  userFigurinhas    UserFigurinha[]
  trocasOfertadas   Troca[]      @relation("FigurinhaOferta")
  trocasSolicitadas Troca[]      @relation("FigurinhaSolicitada")
  pacote            Pacote?      @relation(fields: [pacoteId], references: [id])
  pacoteId          String?
  trocaFigurinhas   TrocaFigurinha[]
  jogador           Jogador?      @relation(fields: [jogadorId], references: [id])
  jogadorId         String?

  @@index([timeId])
  @@index([pacoteId])
  @@index([jogadorId])
}

model Pacote {
  id         String      @id @default(cuid())
  userId     String
  tipo       String      @default("DIARIO")
  aberto     Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  figurinhas Figurinha[]
  user       User        @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserFigurinha {
  id            String   @id @default(cuid())
  userId        String
  figurinhaId  String
  quantidade    Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  nomeJogador   String   @default("")
  nomeTime      String   @default("")
  user          User     @relation("UserFigurinhas", fields: [userId], references: [id], onDelete: Cascade)
  figurinha     Figurinha @relation(fields: [figurinhaId], references: [id], onDelete: Cascade)

  @@unique([userId, figurinhaId])
  @@index([userId])
  @@index([figurinhaId])
}

model Troca {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  status            String   @default("PENDENTE")
  figurinhaOferta   Figurinha @relation("FigurinhaOferta", fields: [figurinhaOfertaId], references: [id])
  figurinhaOfertaId String
  figurinhaSolicitada Figurinha? @relation("FigurinhaSolicitada", fields: [figurinhaSolicitadaId], references: [id])
  figurinhaSolicitadaId String?
  usuarioEnvia      User     @relation("TrocasEnviadas", fields: [usuarioEnviaId], references: [id])
  usuarioEnviaId    String
  usuarioRecebe     User?    @relation("TrocasRecebidas", fields: [usuarioRecebeId], references: [id])
  usuarioRecebeId   String?
  notificacoes      Notificacao[]

  @@index([figurinhaOfertaId])
  @@index([figurinhaSolicitadaId])
  @@index([usuarioEnviaId])
  @@index([usuarioRecebeId])
}

model TrocaFigurinha {
  id          String    @id @default(cuid())
  usuarioId   String
  figurinhaId String
  status      String    @default("DISPONIVEL")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  figurinha   Figurinha @relation(fields: [figurinhaId], references: [id])
  usuario     User      @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId])
  @@index([figurinhaId])
}

model Notificacao {
  id        String   @id @default(cuid())
  tipo      String
  mensagem  String
  lida      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuario   User     @relation(fields: [usuarioId], references: [id])
  usuarioId String

  troca     Troca?   @relation(fields: [trocaId], references: [id])
  trocaId   String?

  @@index([usuarioId])
  @@index([trocaId])
}
